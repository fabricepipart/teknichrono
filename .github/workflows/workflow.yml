name: Test Teknichrono

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - 'master'

jobs:

  ci-client:
    env:
      secrets-available: ${{secrets.CODECOV_TOKEN}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.x
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set up JDK 11
        uses: actions/setup-java@v2.3.0
        with:
          java-version: 11
          distribution: 'adopt'
      - name: Start server
        timeout-minutes: 5
        run: |
          mvn -B compile quarkus:dev &
          while ! curl -fs http://localhost:8080 > /dev/null; do echo 'Not started yet ...'; sleep 5; done
          echo "Started"
      - name: Test chronometer
        run: |
          export COVERAGE_FILE=.coverage_1 ; sh ./src/main/client/demo.sh &
          RUN_PID=$!
          sleep 20
          if cat target/teknichrono.log | grep -q Traceback; then false; fi
          echo "Change configuration to FIRST / NONE / DEBUG"
          python3 src/test/scripts/python/test_demo_conf1.py
          sleep 20
          if cat target/teknichrono.log | grep -q Traceback; then false; fi
          echo "Change configuration to LAST / ASYNC"
          python3 src/test/scripts/python/test_demo_conf2.py
          sleep 20
          if cat target/teknichrono.log | grep -q Traceback; then false; fi
          echo "Change configuration to PROXIMITY / ASYNC"
          python3 src/test/scripts/python/test_demo_conf3.py
          sleep 20
          echo "RUN_PID=$RUN_PID" >> $GITHUB_ENV
      - name: Test chronometer update
        run: |
          python3 src/test/scripts/python/test_demo_restart.py
          sleep 10
          if ps -p $RUN_PID; then echo "Client did not restart" && false; fi
          export COVERAGE_FILE=.coverage_2 ; sh ./src/main/client/demo.sh &
          RUN_PID=$!
          sleep 15
          python3 src/test/scripts/python/test_demo_update.py
          sleep 15
          if ps -p $RUN_PID; then echo "Client did not update" && false; fi
          if cat target/teknichrono.log | grep -q Traceback; then false; fi
      - name: Coverage report
        if: ${{env.secrets-available}}
        run: |
          coverage combine .coverage_1 .coverage_2
          coverage report -m > client-coverage-report.txt --omit=src/main/client/scan/blescan.py
          coverage xml -i
      - uses: codecov/codecov-action@v2.0.3
        if: ${{env.secrets-available}}
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./coverage.xml
          flags: pythonclient
          name: codecov-python-client
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2.2.4
        if: ${{env.secrets-available}}
        with:
          name: code-coverage-report
          path: client-coverage-report.txt

  ci-server:
    env:
      secrets-available: ${{secrets.KUBE_CONFIG}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: ${{env.secrets-available}}
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up JDK 11
        uses: actions/setup-java@v2.3.0
        with:
          java-version: 11
          distribution: 'adopt'
      - name: Bump version and push tag
        id: versioning
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: fabricepipart
          RELEASE_BRANCHES: master
          DRY_RUN: ${{ env.secrets-available == '' }}
      - name: Build Maven and Docker
        env:
          VERSION: ${{ steps.versioning.outputs.new_tag }}
          REPO: fabricepipart/teknichrono-backend
          TESTS_REPO: fabricepipart/teknichrono-backend-tests
        run: |
          mvn -B -U versions:set -DnewVersion=${VERSION} &> /dev/null
          mvn -B -U clean verify
          docker build -f src/main/docker/Dockerfile -t $REPO:$VERSION .
          docker build -f src/main/docker-tests/Dockerfile -t $TESTS_REPO:$VERSION .
      - name: Push Docker
        if: ${{env.secrets-available}}
        env:
          VERSION: ${{ steps.versioning.outputs.new_tag }}
          REPO: fabricepipart/teknichrono-backend
          TESTS_REPO: fabricepipart/teknichrono-backend-tests
        run: |
          docker push $REPO:$VERSION
          docker push $TESTS_REPO:$VERSION
      - uses: codecov/codecov-action@v2.0.3
        if: ${{env.secrets-available}}
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          flags: javaserver
          name: codecov-java-server
      - uses: azure/k8s-set-context@v1
        if: ${{env.secrets-available}}
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: Lock Staging environment
        if: ${{env.secrets-available}}
        timeout-minutes: 80
        run: |
          while kubectl get ns -l lock=true | grep teknichrono-staging > /dev/null; do echo 'Namespaces already used by another test ...'; sleep 5; done
          kubectl label ns teknichrono-staging lock=true
      - name: Update Staging environment
        if: ${{env.secrets-available}}
        timeout-minutes: 10
        run: |
          kubectl delete all -n teknichrono-staging -l app=teknichrono --wait=true
          kubectl kustomize target/classes/overlays/staging | kubectl apply -n teknichrono-staging -f -
          while ! curl -fs https://staging.teknichrono.fr > /dev/null; do echo 'Not started yet ...'; sleep 5; done
      - name: Test Staging environment
        if: ${{env.secrets-available}}
        env:
          VERSION: ${{ steps.versioning.outputs.new_tag }}
          TESTS_REPO: fabricepipart/teknichrono-backend-tests
        run: |
          mvn -B -U versions:set -DnewVersion=${VERSION} &> /dev/null
          kubectl run teknichrono-e2e-tests -n teknichrono-staging --image=$TESTS_REPO:$VERSION --labels="app=teknichrono"  --attach=true --restart=Never -- sh /app/bash/perf_tests.sh staging.teknichrono.fr
      - name: Update Production environment
        if: ${{ github.ref == 'refs/heads/master' && env.secrets-available != '' }}
        timeout-minutes: 10
        run: |
          kubectl delete all -n teknichrono-prod -l app=teknichrono --wait=true
          kubectl kustomize target/classes/overlays/prod | kubectl apply -n teknichrono-prod -f -
          while ! curl -fs https://www.teknichrono.fr > /dev/null; do echo 'Not started yet ...'; sleep 5; done

  ci-server-cleanup:
    needs: ci-server
    env:
      secrets-available: ${{secrets.KUBE_CONFIG}}
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: azure/k8s-set-context@v1
        if: ${{env.secrets-available}}
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: Release Staging environment
        if: ${{env.secrets-available}}
        timeout-minutes: 20
        run: |
          kubectl label ns teknichrono-staging lock-

